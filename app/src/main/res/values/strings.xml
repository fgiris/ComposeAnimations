<resources>
    <string name="app_name">Compose Animations</string>
    <string name="animation_details_animate_as_state_title">animate*AsState</string>
    <string name="animation_details_animate_as_state_description">animate*AsState is the simplest animation API that is used to animate a single value. You only need to give the target value and whenever the target value changes the animation will get triggered again. Compose supports some of the commonly used data types like Int, Float, Dp, Color. But you can still use it to animate any type of value using animateValueAsState. Additionally, no animate*AsState is cancellable without removing this composable function from the tree.</string>
    <string name="animation_details_update_transition_title">updateTransition</string>
    <string name="animation_details_update_transition_description">updateTransition creates a transition that manages running animations between given states. It gives you an opportunity to animate multiple values simultaneously. Remember that the transition created with this composable function only acceptsFiniteAnimationSpec to animate the values. It means that you can only create finite animations with this transition but not infinite ones.</string>
    <string name="animation_details_remember_infinite_transition_title">rememberInfiniteTransition</string>
    <string name="animation_details_remember_infinite_transition_description">rememberInfiniteTransition creates a transition that runs infinite animations. Note that this is also a composable function and cannot be called from a non-composable block.</string>
    <string name="animation_details_animatable_title">Animatable</string>
    <string name="animation_details_animatable_description">Both updateTransition and rememberInfiniteTransition works really well inside the composable blocks. The animation created with these transitions happens during composition. But what if your animation is independent of composition and the animation itself is not the only source of truth (For instance touch events such as animating a circle to the point where the click happens) This is where Animatable comes into play. Animatable is a float value holder which can be used to animate any float value without needing to be called from a composable block. It provides animateTo and animateDecay suspend functions that are used to start an animation.</string>
    <string name="animation_details_target_based_animation_title">TargetBasedAnimation</string>
    <string name="animation_details_target_based_animation_description">Even though most of the aforementioned high-level APIs will be sufficient for most of the use cases, there are some cases we need to control the animation timing manually. (For instance, pausing and continuing the same animation) TargetBasedAnimation gives you an opportunity to control the animation playtime by yourself. Both the start and target values should be specified when creating the TargetBasedAnimation .</string>
    <string name="animation_details_decay_animation_title">DecayAnimation</string>
    <string name="animation_details_decay_animation_description">DecayAnimation also gives you control over the animation playtime. Unlike TargetBasedAnimation, there is no target value for DecayAnimation. You only give an initial value and a velocity, then the target value is calculated based upon those values. You can think of DecayAnimation like an animation calculating engine which gives you the right animation value calculated from the value and the velocity for the corresponding playtime. If you do not need to control the animation time, you should be using Animatable.animateDecay instead of DecayAnimation.</string>
    <string name="animation_details_animated_visibility_title">AnimatedVisibility</string>
    <string name="animation_details_animated_visibility_description">AnimatedVisibility is used when the visibility of the item is changed.</string>
    <string name="animation_details_animated_content_title">AnimatedContent</string>
    <string name="animation_details_animated_content_description">AnimatedContent is used when animating the content of a composable.</string>
</resources>